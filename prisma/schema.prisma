datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model User {
  id        Int         @id @default(autoincrement())
  address   String      @unique // wallet address
  freeVote  Json
  tokens    Token[]
  votes   Vote[]
  tickets Ticket[]
  createdAt DateTime    @default(now())
}
model Token {
  id               Int       @id @default(autoincrement())
  name             String
  symbol           String
  totalSupply      Int
  decimals         Int
  owner            Int
  issuer           User      @relation(fields: [owner], references: [id])
  createdAt        DateTime  @default(now())
  tickets          Ticket[]
  proposalTitle    String
  proposalDesc     String
  proposalStatus   ProposalStatus  
  mint             String
  currentVotePower Int       @default(0)
  votes   Vote[]
  periodId    Int   @default(0)
  votePeriod  VotingPeriod      @relation(fields: [periodId], references: [id])
  logoURL           String
  tokenomicsURL     String  
}
model VoteTokenPair {
  id          Int       @id @default(autoincrement())
  periodId    Int
  votePeriod   VotingPeriod     @relation(fields: [periodId], references: [id])
  voteTokenId     Int
  voteToken  VoteToken      @relation(fields: [voteTokenId], references: [id])
  weight      Int
  minimumCount  Int
}
model VoteToken {
  id          Int       @id @default(autoincrement())
  name      String 
  tokenMint     String @unique
  decimals      String
  tokenpairs    VoteTokenPair []
}
model PoolToken {
  id          Int       @id @default(autoincrement())
  name      String 
  tokenMint     String @unique
  decimals      String
}
model Pool {
  id          Int       @id @default(autoincrement())
  pooladdress     String @unique
  marketaddress   String
  basemint        String
  quotemint       String
  lpmint          String
  baseamount      Int
  quoteamount     Int
  owner           Int
}
model Market {
  id          Int       @id @default(autoincrement())
  marketaddress   String @unique
  basemint        String
  quotemint       String
  minorder        Float
  tick            Float
  owner           Int
}
model VotingPeriod {
  id          Int       @id @default(autoincrement())
  voteTokenPairs    VoteTokenPair[]
  tokens      Token[]
  startAt        DateTime  @default(now())
  endAt   DateTime
  votingtitle String
  votePowerLimit   Int  
}
model Vote {
  id          Int       @id @default(autoincrement())
  votingUser  Int
  votePower   Int
  user        User      @relation(fields: [votingUser], references: [id])
  tokenId     Int
  token       Token     @relation(fields: [tokenId], references: [id])
  txHash      String    @unique
  createdAt   DateTime  @default(now())
}
enum ProposalStatus {
  PENDING
  VOTING
  APPROVED
  LAUNCHED
  DECLINED
}
model Ticket {
  id          Int        @id @default(autoincrement())
  tokenId     Int
  token       Token      @relation(fields: [tokenId], references: [id])
  createdAt   DateTime   @default(now())
  expiredAt   DateTime
  holder      Int
  user        User       @relation(fields: [holder], references: [id])
}